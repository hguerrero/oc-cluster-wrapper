#!/bin/bash

function imagestreams.describe {
   echo "Installs different imagestreams and/or templates, based on user choice."
   echo "These can be the most official ImageStreams and/or Templates for xPaaS and SCL based on RHEL or the origin imagestreams based on Centos"
   echo "When installing:"
   echo "  - if using a parameter: both imagestreams and templates will be added that match the passed criteria"
   echo "  - if NOT using a parameter: ONLY imagestreams will be added to the current OS type [$__TYPE]"
   echo ""
   echo "If you don't want this behavior, please install them separately using the provided (imagestreams/templates) commands"
   imagestreams.help
}

function imagestreams.help {
  echo "  oc-cluster imagestreams [ocp|origin,rhel|centos,xpaas,wildfly,dotnet,quickstarts,3scale,jenkins,db,cfme] [version]"
  echo "  oc-cluster templates [all,quickstarts,3scale,jenkins,db,cfme] [version]"
}

function imagestreams.install {
  imagestreams "$@"
  ## Only install templates if explicitly passed a param
  [ "$#" -gt 0 ] && templates "$@"
  echo "Imagestreams and templates have been installed in 'openshift' project"
}

function imagestreams.uninstall {
  echo "If you want different imagestreams/templates just install them"
}

#
# Arguments:
#  $1: imagestreams [ocp,origin,rhel,centos,xpaas,wildfly,java,dotnet]: Defaults to the current client type
#  $2: version (v1.0,v1.1,v1.2,v1.3,v1.4,v1.5). Seen at: https://github.com/openshift/openshift-ansible/tree/master/roles/openshift_examples/files/examples: Defaults to latest
#
function imagestreams {
  requiresInternet

  local __is=${1:-$__TYPE}
  local __version=${2:-$(curl -s https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/latest)}

  [ $__is == "ocp" ] && __is="rhel,xpaas,dotnet"
  [ $__is == "origin" ] && __is="centos,java,dotnet"

  echo "[INFO] Installing the following ImageStreams: ${__is}"
  # Check which imagestreams to install 
  #parseArguments
  local _tokens=$(echo $__is | tr "," "\n")
  for is in $_tokens
  do
    case $is in
      rhel) 
        rhel=true
        ;; 
      centos)
        centos=true
        ;; 
      xpaas)
        xpaas=true
        ;; 
      wildfly)
        wildfly=true
        ;;
      java)
        java=true
        ;;
      dotnet)
        dotnet=true
        ;;
      *)
        echo "[INFO] Imagestreams type [$is] not found"
        ;; 
    esac
  done

  local _imagestreams=()
  if [ ! -z $rhel ]
  then
    _imagestreams+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/image-streams/image-streams-rhel7.json)
  fi

  if [ ! -z $centos ]
  then
    _imagestreams+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/image-streams/image-streams-centos7.json)
  fi

  if [ ! -z $dotnet ]
  then
    _imagestreams+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/image-streams/dotnet_imagestreams.json)
  fi

  if [ ! -z $xpaas ]
  then
    _imagestreams+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-streams/jboss-image-streams.json)
    _imagestreams+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-streams/fis-image-streams.json)
  fi

  if [ ! -z $wildfly ]
  then
    : # echo "wildfly"
  fi

  if [ ! -z $java ]
  then
    ${OC_BINARY} import-image redhat-openjdk18-openshift:1.0 --from registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift:1.0 --confirm -n openshift --as=system:admin
    ${OC_BINARY} tag openshift/redhat-openjdk18-openshift:1.0 openshift/redhat-openjdk18-openshift:latest -n openshift --as=system:admin
    # TODO: Mark the image as a builder 
  fi

  for is in ${_imagestreams[@]}
  do
    ${OC_BINARY} apply -n openshift -f "$is" --as=system:admin
  done

  #jorgemoralespou s2i java image streams
  # ${OC_BINARY} apply -n openshift -f https://raw.githubusercontent.com/jorgemoralespou/s2i-java/master/ose3/s2i-java-imagestream.json --as=system:admin
}

#
# Arguments:
#  $1: templates [all,xpaas,quickstarts,3scale,jenkins,db,cfme]: Defaults to the current client type
#  $2: version (v1.0,v1.1,v1.2,v1.3,v1.4,v1.5). Seen at: https://github.com/openshift/openshift-ansible/tree/master/roles/openshift_examples/files/examples: Defaults to latest
#
function templates {
  requiresInternet
  local __tplt=${1:-"all"}
  local __version=${2:-$(curl -s https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/latest)}

  [ $__tplt == "all" ] && __tplt="xpaas,quickstarts,3scale,jenkins,db,cfme"

  echo "[INFO] Installing the following Templates: ${__tplt}"
  # Check which templates to install 
  #parseArguments
  local _tokens=$(echo $__tplt | tr "," "\n")
  for tplt in $_tokens
  do
    case $tplt in
      xpaas)
        xpaas=true
        ;; 
      quickstarts)
        quickstarts=true
        ;;
      3scale)
        api3scale=true
        ;;
      jenkins)
        jenkins=true
        ;;
      db)
        db=true
        ;;
      cfme)
        cfme=true
        ;;
      *)
        echo "[INFO] Templates type [$tplt] not found"
      ;; 
    esac
  done
  if [ ! -z $xpaas ]
  then
    # These are templates
    for i in amq62-basic amq62-persistent-ssl amq62-persistent amq62-ssl
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in datagrid65-basic datagrid65-https datagrid65-mysql-persistent datagrid65-mysql datagrid65-postgresql-persistent datagrid65-postgresql
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in datavirt63-basic-s2i datavirt63-extensions-support-s2i datavirt63-secure-s2i
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in decisionserver62-amq-s2i decisionserver62-basic-s2i decisionserver62-https-s2i decisionserver63-amq-s2i decisionserver63-basic-s2i decisionserver63-https-s2i
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in eap64-amq-persistent-s2i eap64-amq-s2i eap64-basic-s2i eap64-https-s2i eap64-mongodb-persistent-s2i eap64-mongodb-s2i eap64-mysql-persistent-s2i eap64-mysql-s2i eap64-postgresql-persistent-s2i eap64-postgresql-s2i eap64-sso-s2i
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in eap70-amq-persistent-s2i eap70-amq-s2i eap70-basic-s2i eap70-https-s2i eap70-mongodb-persistent-s2i eap70-mongodb-s2i eap70-mysql-persistent-s2i eap70-mysql-s2i eap70-postgresql-persistent-s2i eap70-postgresql-s2i eap70-sso-s2i
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in jws30-tomcat7-basic-s2i jws30-tomcat7-https-s2i jws30-tomcat7-mongodb-persistent-s2i jws30-tomcat7-mongodb-s2i jws30-tomcat7-mysql-persistent-s2i jws30-tomcat7-mysql-s2i jws30-tomcat7-postgresql-s2i jws30-tomcat7-postgresql-persistent-s2i
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in jws30-tomcat8-basic-s2i jws30-tomcat8-https-s2i jws30-tomcat8-mongodb-persistent-s2i jws30-tomcat8-mongodb-s2i jws30-tomcat8-mysql-persistent-s2i jws30-tomcat8-mysql-s2i jws30-tomcat8-postgresql-s2i jws30-tomcat8-postgresql-persistent-s2i
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in karaf2-camel-amq-template karaf2-camel-log-template karaf2-camel-rest-sql-template karaf2-cxf-rest-template
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in openjdk18-web-basic-s2i
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in processserver63-amq-mysql-persistent-s2i processserver63-amq-mysql-s2i processserver63-amq-postgresql-persistent-s2i processserver63-amq-postgresql-persistent-s2i processserver63-basic-s2i processserver63-mysql-persistent-s2i processserver63-mysql-s2i processserver63-postgresql-persistent-s2i processserver63-postgresql-persistent-s2i
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in spring-boot-camel-amq-template spring-boot-camel-config-template spring-boot-camel-drools-template spring-boot-camel-infinispan-template spring-boot-camel-rest-sql-template spring-boot-camel-teiid-template spring-boot-camel-template spring-boot-camel-xml-template
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
    for i in sso70-https sso70-mysql-persistent sso70-mysql sso70-postgresql-persistent sso70-postgresql
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/xpaas-templates/${i}.json)
    done
  fi

  if [ ! -z $quickstarts ]
  then
    for i in cakephp-mysql cakephp-mysql-persistent dancer-mysql dancer-mysql-persistent django-postgresql django-postgresql-persistent nodejs-mongodb nodejs-mongodb-persistent rails-postgresql rails-postgresql-persistent
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/quickstart-templates/${i}.json)
    done
  fi

  if [ ! -z $jenkins ]
  then
    for i in jenkins-ephemeral-template jenkins-persistent-template
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/quickstart-templates/${i}.json)
    done
  fi

  if [ ! -z $api3scale ]
  then
    _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/quickstart-templates/apicast-gateway-template.yml)
  fi
  
  if [ ! -z $db ]
  then
    for i in mariadb-ephemeral-template mariadb-persistent-template mongodb-ephemeral-template mongodb-persistent-template mysql-ephemeral-template mysql-persistent-template postgresql-ephemeral-template postgresql-persistent-template redis-ephemeral-template redis-persistent-template
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/db-templates/${i}.json)
    done
  fi

  if [ ! -z $cfme ]
  then
    for i in cfme-pv-app-example cfme-pv-example cfme-template
    do
      _templates+=(https://raw.githubusercontent.com/openshift/openshift-ansible/master/roles/openshift_examples/files/examples/${__version}/quickstart-templates/${i}.yaml)
    done
  fi

  for tplt in ${_templates[@]}
  do
    ${OC_BINARY} apply -n openshift -f "$tplt" --as=system:admin
  done

  #jorgemoralespou s2i java image streams
  # ${OC_BINARY} apply -n openshift -f https://raw.githubusercontent.com/jorgemoralespou/s2i-java/master/ose3/s2i-java-imagestream.json --as=system:admin
}

imagestreams.describe